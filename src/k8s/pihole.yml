apiVersion: v1
kind: Namespace
metadata:
  name: pihole
  labels:
    name: pihole
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: unbound-a-records-configmap
  namespace: pihole
data:
  a-records: |
    # DeepStack Records
    local-data: "deepstack.${NETWORK_HOSTNAME_SUFFIX}. A ${CLUSTER_HOSTNETWORKINGIPADDRESS}"
    local-data-ptr: "${CLUSTER_HOSTNETWORKINGIPADDRESS} deepstack.${NETWORK_HOSTNAME_SUFFIX}."

    # Homebridge Records
    local-data: "homebridge.${NETWORK_HOSTNAME_SUFFIX}. A ${CLUSTER_HOSTNETWORKINGIPADDRESS}"
    local-data-ptr: "${CLUSTER_HOSTNETWORKINGIPADDRESS} homebridge.${NETWORK_HOSTNAME_SUFFIX}."

    # Pi-hole Records
    local-data: "pihole.${NETWORK_HOSTNAME_SUFFIX}. A ${CLUSTER_HOSTNETWORKINGIPADDRESS}"
    local-data-ptr: "${CLUSTER_HOSTNETWORKINGIPADDRESS} pihole.${NETWORK_HOSTNAME_SUFFIX}."

    # Portainer Records
    local-data: "portainer.${NETWORK_HOSTNAME_SUFFIX}. A ${CLUSTER_HOSTNETWORKINGIPADDRESS}"
    local-data-ptr: "${CLUSTER_HOSTNETWORKINGIPADDRESS} portainer.${NETWORK_HOSTNAME_SUFFIX}."

    # Grafana Records
    local-data: "grafana.${NETWORK_HOSTNAME_SUFFIX}. A ${CLUSTER_HOSTNETWORKINGIPADDRESS}"
    local-data-ptr: "${CLUSTER_HOSTNETWORKINGIPADDRESS} grafana.${NETWORK_HOSTNAME_SUFFIX}."

    # Prometheus Records
    local-data: "prometheus.${NETWORK_HOSTNAME_SUFFIX}. A ${CLUSTER_HOSTNETWORKINGIPADDRESS}"
    local-data-ptr: "${CLUSTER_HOSTNETWORKINGIPADDRESS} prometheus.${NETWORK_HOSTNAME_SUFFIX}."

    # Alert Manager Records
    local-data: "alertmanager.${NETWORK_HOSTNAME_SUFFIX}. A ${CLUSTER_HOSTNETWORKINGIPADDRESS}"
    local-data-ptr: "${CLUSTER_HOSTNETWORKINGIPADDRESS} alertmanager.${NETWORK_HOSTNAME_SUFFIX}."
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: unbound
  namespace: pihole
  labels:
    app: unbound
spec:
  serviceName: "unbound"
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: unbound
  template:
    metadata:
      labels:
        app: unbound
    spec:
      containers:
        - name: unbound
          image: docker.io/mvance/unbound-rpi:latest
          ports:
            - name: svc-53-udp
              containerPort: 53
              protocol: UDP
            - name: svc-53-tcp
              containerPort: 53
              protocol: TCP
          resources:
            limits:
              memory: "1024M"
              cpu: "1"
            requests:
              memory: "50Mi"
              cpu: "100m"
          volumeMounts:
            - mountPath: /opt/unbound/etc/unbound/a-records.conf
              name: unbound-a-records
              subPath: a-records.conf
      volumes:
        - name: unbound-a-records
          configMap:
            name: unbound-a-records-configmap
            items:
              - key: a-records
                path: a-records.conf
---
apiVersion: v1
kind: Service
metadata:
  name: unbound-service
  namespace: pihole
spec:
  selector:
    app: unbound
  type: ClusterIP
  clusterIP: 10.43.0.20
  ports:
    - name: 53-udp
      port: 53
      targetPort: 53
      protocol: UDP
    - name: 53-tcp
      port: 53
      targetPort: 53
      protocol: TCP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: pihole
  name: pihole-pvc
spec:
  storageClassName: nfs
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: pihole
  name: pihole-dns-pvc
spec:
  storageClassName: nfs
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pihole-configmap
  namespace: pihole
data:
  TZ: "${TIMEZONE}"
  ADMIN_EMAIL: "${REPLY_EMAIL}"
  PIHOLE_DNS_: "10.43.0.20;10.43.0.20"
  CUSTOM_CACHE_SIZE: "0"
---
apiVersion: v1
kind: Secret
metadata:
  name: pihole-secret
  namespace: pihole
data:
  WEBPASSWORD: ${PIHOLE_PASSWORD}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pihole
  namespace: pihole
  labels:
    app: pihole
spec:
  serviceName: "pihole"
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: pihole
  template:
    metadata:
      labels:
        app: pihole
    spec:
      containers:
        - name: pihole
          # TODO: when the ulimit bug is fixed, upgrade to latest: https://github.com/pi-hole/docker-pi-hole/issues/772
          # image: docker.io/pihole/pihole:v5.1.2
          image: pihole/pihole:latest
          imagePullPolicy: Always
          envFrom:
            - configMapRef:
                name: pihole-configmap
            - secretRef:
                name: pihole-secret
          ports:
            - name: svc-53-udp
              containerPort: 53
              protocol: UDP
            - name: svc-53-tcp
              containerPort: 53
              protocol: TCP
            - name: svc-ui
              containerPort: 80
              protocol: TCP
          resources:
            limits:
              memory: "1024M"
              cpu: "1"
            requests:
              memory: "50Mi"
              cpu: "100m"
          volumeMounts:
            - mountPath: /etc/pihole
              name: pihole-etc
            - mountPath: /etc/dnsmasq.d
              name: dnsmasq-etc
      volumes:
        - name: pihole-etc
          persistentVolumeClaim:
            claimName: pihole-pvc
        - name: dnsmasq-etc
          persistentVolumeClaim:
            claimName: pihole-dns-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: pihole-ui-svc
  namespace: pihole
spec:
  selector:
    app: pihole
  ports:
    - name: 80-tcp
      port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: pihole-dns-svc
  namespace: pihole
spec:
  selector:
    app: pihole
  type: ClusterIP
  clusterIP: 10.43.0.30
  ports:
    - name: 53-tcp
      port: 53
      targetPort: 53
      protocol: TCP
    - name: 53-udp
      port: 53
      targetPort: 53
      protocol: UDP
---
apiVersion: v1
kind: Service
metadata:
  name: pihole-dns-udp
  namespace: pihole
spec:
  selector:
    app: pihole
  ports:
    - name: 53-udp
      port: 53
      targetPort: 53
      protocol: UDP
  externalTrafficPolicy: Local
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
      - ip: ${CLUSTER_HOSTNETWORKINGIPADDRESS}
---
apiVersion: v1
kind: Service
metadata:
  name: pihole-dns-tcp
  namespace: pihole
spec:
  selector:
    app: pihole
  ports:
    - name: 53-tcp
      port: 53
      targetPort: 53
      protocol: TCP
  externalTrafficPolicy: Local
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
      - ip: ${CLUSTER_HOSTNETWORKINGIPADDRESS}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pihole-ingress
  namespace: pihole
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
    - host: pihole.${NETWORK_HOSTNAME_SUFFIX}
      http:
        paths:
          - pathType: Prefix
            path: /admin
            backend:
              service:
                name: pihole-ui-svc
                port:
                  name: 80-tcp
